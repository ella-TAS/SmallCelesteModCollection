name: Build using .NET Core

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check for tabs
      run: |
        find "(" -name "*.cs" -or -name "*.lua" -or -name "*.jl" -or -name "*.lang" -or -name "*.xml" -or -name "*.yaml" -or -name "*.yml" -or -name "*.txt" -or -name "*.md" ")" -exec grep -Pl "\t" {} \; > matches.txt
        grep "" matches.txt && exit 1 || echo "No tab found!"

    - name: Check for CRLF
      run: |
        find "(" -name "*.cs" -or -name "*.lua" -or -name "*.jl" -or -name "*.lang" -or -name "*.xml" -or -name "*.yaml" -or -name "*.yml" -or -name "*.txt" -or -name "*.md" ")" -exec grep -Plz "\r\n" {} \; > matches.txt
        grep "" matches.txt && exit 1 || echo "No CRLF found!"

    - name: Check for trailing spaces
      run: |
        find "(" -name "*.cs" -or -name "*.lua" -or -name "*.jl" -or -name "*.lang" -or -name "*.xml" -or -name "*.yaml" -or -name "*.yml" -or -name "*.txt" -or -name "*.md" ")" -exec grep -Pl " $" {} \; > matches.txt
        grep "" matches.txt && exit 1 || echo "No trailing space found!"

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 2.2.108

    - name: AroxonBerry - Restore with .NET Core
      run: cd AroxonBerry && dotnet restore

    - name: AroxonBerry - Build using Mono
      run: cd AroxonBerry && msbuild *.sln "/p:Configuration=Release"

    - name: AroxonBerry - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: AroxonBerry
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452 Ahorn
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: BadelineHairDye - Restore with .NET Core
      run: cd BadelineHairDye && dotnet restore

    - name: BadelineHairDye - Build using Mono
      run: cd BadelineHairDye && msbuild *.sln "/p:Configuration=Release"

    - name: BadelineHairDye - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: BadelineHairDye
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: BloomCommand - Restore with .NET Core
      run: cd BloomCommand && dotnet restore

    - name: BloomCommand - Build using Mono
      run: cd BloomCommand && msbuild *.sln "/p:Configuration=Release"

    - name: BloomCommand - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: BloomCommand
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: DisplayMessageCommand - Restore with .NET Core
      run: cd DisplayMessageCommand && dotnet restore

    - name: DisplayMessageCommand - Build using Mono
      run: cd DisplayMessageCommand && msbuild *.sln "/p:Configuration=Release"

    - name: DisplayMessageCommand - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: DisplayMessageCommand
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452 Graphics
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: EventMode - Restore with .NET Core
      run: cd EventMode && dotnet restore

    - name: EventMode - Build using Mono
      run: cd EventMode && msbuild *.sln "/p:Configuration=Release"

    - name: EventMode - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: EventMode
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: FullClearStamp - Restore with .NET Core
      run: cd FullClearStamp && dotnet restore

    - name: FullClearStamp - Build using Mono
      run: cd FullClearStamp && msbuild *.sln "/p:Configuration=Release"

    - name: FullClearStamp - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: FullClearStamp
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452 Graphics
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: GoldenBirdInJournal - Restore with .NET Core
      run: cd GoldenBirdInJournal && dotnet restore

    - name: GoldenBirdInJournal - Build using Mono
      run: cd GoldenBirdInJournal && msbuild *.sln "/p:Configuration=Release"

    - name: GoldenBirdInJournal - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: GoldenBirdInJournal
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452 Graphics
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: IronSmelteryCampaign - Restore with .NET Core
      run: cd IronSmelteryCampaign && dotnet restore

    - name: IronSmelteryCampaign - Build using Mono
      run: cd IronSmelteryCampaign && msbuild *.sln "/p:Configuration=Release"

    - name: IronSmelteryCampaign - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: IronSmelteryCampaign
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452 Ahorn Graphics
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"

    - name: SafeRespawnCrumble - Restore with .NET Core
      run: cd SafeRespawnCrumble && dotnet restore

    - name: SafeRespawnCrumble - Build using Mono
      run: cd SafeRespawnCrumble && msbuild *.sln "/p:Configuration=Release"

    - name: SafeRespawnCrumble - Publish release
      if: github.ref == 'refs/heads/main'
      env:
        ZIPNAME: SafeRespawnCrumble
        GITHUB_SHA: ${{ github.sha }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        cd $ZIPNAME
        ZIPNAME=$ZIPNAME-${GITHUB_SHA:0:8}.zip
        zip -qq -r $ZIPNAME everest.yaml bin/Release/net452 Ahorn Dialog Graphics Loenn
        curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$ZIPNAME" "$DISCORD_WEBHOOK"
